{"version":3,"sources":["components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","showMenu","setShowMenu","getMenuItems","to","className","src","alt","onClick","height","viewBox","width","xmlns","d","Home","lazy","PokedexPage","PokefavsPage","App","Fragment","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAuCeA,G,MAnCA,WAAO,IAAD,EACeC,oBAAS,GADxB,mBACVC,EADU,KACAC,EADA,KAGXC,EAAe,kBAAM,4BACvB,kBAAC,IAAD,CAAMC,GAAG,KAAI,qCACb,kBAAC,IAAD,CAAMA,GAAG,KAAI,wCACb,kBAAC,IAAD,CAAMA,GAAG,KAAI,uCACb,kBAAC,IAAD,CAAMA,GAAG,YAAW,wCACpB,kBAAC,IAAD,CAAMA,GAAG,aAAY,0CAGzB,OAAO,4BAAQC,UAAU,UACrB,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMD,GAAG,KACL,yBAAKC,UAAU,sBAAsBC,IAAI,gBAAgBC,IAAI,SAC7D,yCAGN,yBAAKF,UAAU,yBACVF,KAEL,yBAAKE,UAAU,wBACX,4BAAQA,UAAU,6BAA6BG,QAAS,kBAAMN,GAAaD,KACzE,yBAAKQ,OAAO,OAAOC,QAAQ,gBAAgBC,MAAM,OAAOC,MAAM,8BAA6B,0BAAMC,EAAE,kIAAiI,0BAAMA,EAAE,0HAAyH,0BAAMA,EAAE,oIAE7WZ,EACE,yBAAKI,UAAU,8BAA8BG,QAAS,kBAAMN,GAAY,KACnEC,KAEH,SC5BZW,EAAOC,gBAAK,kBAAM,gCAClBC,EAAcD,gBAAK,kBAAM,gCACzBE,EAAeF,gBAAK,kBAAM,gCAiBjBG,EAfH,kBACV,kBAAC,IAAMC,SAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,WAAWC,UAAWP,IACxC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,UAAWN,SCL7BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf3f7cc2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    const [showMenu, setShowMenu] = useState(false);\r\n\r\n    const getMenuItems = () => <ul>\r\n        <Link to=\"/\"><li>Home</li></Link>\r\n        <Link to=\"/\"><li>History</li></Link>\r\n        <Link to=\"/\"><li>Videos</li></Link>\r\n        <Link to=\"/pokedex\"><li>Pokedex</li></Link>\r\n        <Link to=\"/pokefavs\"><li>My Favs</li></Link>\r\n    </ul>;\r\n\r\n    return <header className=\"header\">\r\n        <div className=\"header__logo\">\r\n          <Link to=\"/\">\r\n              <img className=\"header__logo__image\" src=\"/pokeball.png\" alt=\"logo\" />\r\n              <h2>Pokedex</h2>    \r\n          </Link>\r\n        </div>\r\n        <div className=\"header__menu__desktop\">\r\n            {getMenuItems()}\r\n        </div>\r\n        <div className=\"header__menu__mobile\">\r\n            <button className=\"header__menu__mobile__icon\" onClick={() => setShowMenu(!showMenu)}>\r\n              <svg height=\"24px\" viewBox=\"0 -53 384 384\" width=\"24px\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m368 154.667969h-352c-8.832031 0-16-7.167969-16-16s7.167969-16 16-16h352c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0\"/><path d=\"m368 32h-352c-8.832031 0-16-7.167969-16-16s7.167969-16 16-16h352c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0\"/><path d=\"m368 277.332031h-352c-8.832031 0-16-7.167969-16-16s7.167969-16 16-16h352c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0\"/></svg>\r\n            </button>\r\n            { showMenu ?\r\n                <div className=\"header__menu__mobile__items\" onClick={() => setShowMenu(false)}>\r\n                    {getMenuItems()}\r\n                </div>\r\n                : null\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport React, { Suspense, lazy } from 'react';\r\nimport './styles/App.css';\r\nimport Header from './components/Header/Header';\r\n\r\nconst Home = lazy(() => import('./pages/Home/Home'));\r\nconst PokedexPage = lazy(() => import('./pages/PokedexPage/PokedexPage'));\r\nconst PokefavsPage = lazy(() => import('./pages/PokefavsPage/PokefavsPage'));\r\n\r\nconst App = () => (\r\n  <React.Fragment>\r\n  <Router>\r\n    <Header />\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route exact path=\"/pokedex\" component={PokedexPage}/>\r\n        <Route exact path=\"/pokefavs\" component={PokefavsPage}/>\r\n      </Switch>\r\n    </Suspense>\r\n  </Router>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}